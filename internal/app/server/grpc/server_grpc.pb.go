// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: server.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShortenerService_CreateShortURL_FullMethodName      = "/url_shortener.ShortenerService/CreateShortURL"
	ShortenerService_CreateBatchShortURL_FullMethodName = "/url_shortener.ShortenerService/CreateBatchShortURL"
	ShortenerService_GetByShortURL_FullMethodName       = "/url_shortener.ShortenerService/GetByShortURL"
	ShortenerService_PingStorage_FullMethodName         = "/url_shortener.ShortenerService/PingStorage"
	ShortenerService_GetUrlsByUser_FullMethodName       = "/url_shortener.ShortenerService/GetUrlsByUser"
	ShortenerService_DeleteUrlsByUser_FullMethodName    = "/url_shortener.ShortenerService/DeleteUrlsByUser"
	ShortenerService_GetStats_FullMethodName            = "/url_shortener.ShortenerService/GetStats"
)

// ShortenerServiceClient is the client API for ShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerServiceClient interface {
	// CreateShortURL создает сокращенный URL на основе исходного URL.
	CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error)
	// CreateBatchShortURL создает несколько сокращенных URL на основе списка исходных URL.
	CreateBatchShortURL(ctx context.Context, in *CreateBatchShortURLRequest, opts ...grpc.CallOption) (*CreateBatchShortURLResponse, error)
	// GetByShortURL возвращает исходный URL по сокращенному URL.
	GetByShortURL(ctx context.Context, in *GetByShortURLRequest, opts ...grpc.CallOption) (*GetByShortURLResponse, error)
	// PingStorage проверяет доступность хранилища данных.
	PingStorage(ctx context.Context, in *PingStorageRequest, opts ...grpc.CallOption) (*PingStorageResponse, error)
	// GetUrlsByUser возвращает список URL, созданных пользователем.
	GetUrlsByUser(ctx context.Context, in *GetUrlsByUserRequest, opts ...grpc.CallOption) (*GetUrlsByUserResponse, error)
	// DeleteUrlsByUser удаляет список URL, созданных пользователем.
	DeleteUrlsByUser(ctx context.Context, in *DeleteUrlsByUserRequest, opts ...grpc.CallOption) (*DeleteUrlsByUserResponse, error)
	// GetStats возвращающий в ответ объект статистики.
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type shortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerServiceClient(cc grpc.ClientConnInterface) ShortenerServiceClient {
	return &shortenerServiceClient{cc}
}

func (c *shortenerServiceClient) CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error) {
	out := new(CreateShortURLResponse)
	err := c.cc.Invoke(ctx, ShortenerService_CreateShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) CreateBatchShortURL(ctx context.Context, in *CreateBatchShortURLRequest, opts ...grpc.CallOption) (*CreateBatchShortURLResponse, error) {
	out := new(CreateBatchShortURLResponse)
	err := c.cc.Invoke(ctx, ShortenerService_CreateBatchShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetByShortURL(ctx context.Context, in *GetByShortURLRequest, opts ...grpc.CallOption) (*GetByShortURLResponse, error) {
	out := new(GetByShortURLResponse)
	err := c.cc.Invoke(ctx, ShortenerService_GetByShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) PingStorage(ctx context.Context, in *PingStorageRequest, opts ...grpc.CallOption) (*PingStorageResponse, error) {
	out := new(PingStorageResponse)
	err := c.cc.Invoke(ctx, ShortenerService_PingStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetUrlsByUser(ctx context.Context, in *GetUrlsByUserRequest, opts ...grpc.CallOption) (*GetUrlsByUserResponse, error) {
	out := new(GetUrlsByUserResponse)
	err := c.cc.Invoke(ctx, ShortenerService_GetUrlsByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) DeleteUrlsByUser(ctx context.Context, in *DeleteUrlsByUserRequest, opts ...grpc.CallOption) (*DeleteUrlsByUserResponse, error) {
	out := new(DeleteUrlsByUserResponse)
	err := c.cc.Invoke(ctx, ShortenerService_DeleteUrlsByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, ShortenerService_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServiceServer is the server API for ShortenerService service.
// All implementations must embed UnimplementedShortenerServiceServer
// for forward compatibility
type ShortenerServiceServer interface {
	// CreateShortURL создает сокращенный URL на основе исходного URL.
	CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error)
	// CreateBatchShortURL создает несколько сокращенных URL на основе списка исходных URL.
	CreateBatchShortURL(context.Context, *CreateBatchShortURLRequest) (*CreateBatchShortURLResponse, error)
	// GetByShortURL возвращает исходный URL по сокращенному URL.
	GetByShortURL(context.Context, *GetByShortURLRequest) (*GetByShortURLResponse, error)
	// PingStorage проверяет доступность хранилища данных.
	PingStorage(context.Context, *PingStorageRequest) (*PingStorageResponse, error)
	// GetUrlsByUser возвращает список URL, созданных пользователем.
	GetUrlsByUser(context.Context, *GetUrlsByUserRequest) (*GetUrlsByUserResponse, error)
	// DeleteUrlsByUser удаляет список URL, созданных пользователем.
	DeleteUrlsByUser(context.Context, *DeleteUrlsByUserRequest) (*DeleteUrlsByUserResponse, error)
	// GetStats возвращающий в ответ объект статистики.
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	mustEmbedUnimplementedShortenerServiceServer()
}

// UnimplementedShortenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServiceServer struct {
}

func (UnimplementedShortenerServiceServer) CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURL not implemented")
}
func (UnimplementedShortenerServiceServer) CreateBatchShortURL(context.Context, *CreateBatchShortURLRequest) (*CreateBatchShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchShortURL not implemented")
}
func (UnimplementedShortenerServiceServer) GetByShortURL(context.Context, *GetByShortURLRequest) (*GetByShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByShortURL not implemented")
}
func (UnimplementedShortenerServiceServer) PingStorage(context.Context, *PingStorageRequest) (*PingStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingStorage not implemented")
}
func (UnimplementedShortenerServiceServer) GetUrlsByUser(context.Context, *GetUrlsByUserRequest) (*GetUrlsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrlsByUser not implemented")
}
func (UnimplementedShortenerServiceServer) DeleteUrlsByUser(context.Context, *DeleteUrlsByUserRequest) (*DeleteUrlsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUrlsByUser not implemented")
}
func (UnimplementedShortenerServiceServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortenerServiceServer) mustEmbedUnimplementedShortenerServiceServer() {}

// UnsafeShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServiceServer will
// result in compilation errors.
type UnsafeShortenerServiceServer interface {
	mustEmbedUnimplementedShortenerServiceServer()
}

func RegisterShortenerServiceServer(s grpc.ServiceRegistrar, srv ShortenerServiceServer) {
	s.RegisterService(&ShortenerService_ServiceDesc, srv)
}

func _ShortenerService_CreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).CreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_CreateShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).CreateShortURL(ctx, req.(*CreateShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_CreateBatchShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).CreateBatchShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_CreateBatchShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).CreateBatchShortURL(ctx, req.(*CreateBatchShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetByShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetByShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_GetByShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetByShortURL(ctx, req.(*GetByShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_PingStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).PingStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_PingStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).PingStorage(ctx, req.(*PingStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetUrlsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetUrlsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_GetUrlsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetUrlsByUser(ctx, req.(*GetUrlsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_DeleteUrlsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUrlsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).DeleteUrlsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_DeleteUrlsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).DeleteUrlsByUser(ctx, req.(*DeleteUrlsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerService_ServiceDesc is the grpc.ServiceDesc for ShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url_shortener.ShortenerService",
	HandlerType: (*ShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortURL",
			Handler:    _ShortenerService_CreateShortURL_Handler,
		},
		{
			MethodName: "CreateBatchShortURL",
			Handler:    _ShortenerService_CreateBatchShortURL_Handler,
		},
		{
			MethodName: "GetByShortURL",
			Handler:    _ShortenerService_GetByShortURL_Handler,
		},
		{
			MethodName: "PingStorage",
			Handler:    _ShortenerService_PingStorage_Handler,
		},
		{
			MethodName: "GetUrlsByUser",
			Handler:    _ShortenerService_GetUrlsByUser_Handler,
		},
		{
			MethodName: "DeleteUrlsByUser",
			Handler:    _ShortenerService_DeleteUrlsByUser_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _ShortenerService_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
